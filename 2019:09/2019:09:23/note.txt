Vue官方文档

一、介绍
1.声明式渲染
（1）{{}}
（2）v-bind:
2.条件与循环
（1）v-if:
我们不仅可以把数据绑定到DOM文本或特性上，还可以绑定到DOM结构上。
v-if 与 v-show 的区别：
v-if是动态得向DOM树内添加或删除DOM元素，v-show是通过设置display内联样式来控制显隐。所以v-if切换有个局部的编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的css切换；
（v-if和v-show都为false时，他们分别的dom结构为<!---->、<span display="none"></span>）
v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译,编译缓存，然后再切换为假时进行局部卸载。但v-show无论在任何条件下都被编译，然后被缓存，而且DOM元素保留;
v-if有更高的切换消耗，v-show有更高的初始渲染消耗；
v-if适合运营条件不大可能改变，v-show适合频繁切换；
v-if与v-show都不在页面中占据位置，visibility在页面中占据位置
引用：https://www.cnblogs.com/echolun/p/7803943.html
（2）v-for
循环绑定的数组数据
3.处理用户输入
（1）v-on:事件名称（click）
用 v-on 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法;
在 reverseMessage 方法中，我们更新了应用的状态，但没有触碰DOM——所有的DOM 操作都由Vue来处理，编写的代码只需要关注逻辑层面即可。vue会把修改的data数据相关的dep中的所有界面watcher都改变
（2）v-model
v-model指令，它能轻松实现表单输入和应用状态之间的双向绑定
4.组件化应用构建
(1) components
vue父组件可以通过components属性声明子组件
（2）props
子组件通过prop属性接收父组件传递的数据
父组件传递给子组件的数据 v-bind:属性名（使用 v-bind 指令将待办项传到循环输出的每个组件）

二、Vue实例
1.数据与方法
（1）只有当实例被创建时就已经存在于data中的属性才是响应式的。也就是说如果你添加一个新的属性，比如：vm.b = 'x'，那么对b的改动将不会触发任何视图的更新。比如：我在渲染页面时候请求后台接口，成功获取数据后，如果vm.xxx = result.data.xxx; 然而在data数据中并没有设置初始值，是不会重新渲染页面的。所以，如果你知道你会在晚些时候需要一个属性，但是一开始它为空或不存在，那么你仅需要设置一些初始值，例如：todos: []。
（2）Object.freeze()
会阻止修改现有属性，响应系统无法再追踪变化.
Object.freeze()方法可以冻结一个对象。被冻结对象自身的所有属性都不可能以任何方式被修改。数据属性的值不可更改，访问器属性（有getter和setter）也同样（但由于是函数调用，给人的错觉是还是可以修改这个属性）。如果一个属性的值是个对象，则这个对象中的属性是可以修改的，除非它也是个冻结对象。数组作为一种对象，被冻结，其元素不能被修改。没有数组元素可以被添加或移除。
这个方法返回传递的对象，而不是创建一个被冻结的副本。
2.实例生命周期钩子
（1）不要在选项属性或回调上使用箭头函数，比如 created: () => console.log(this.a) 或 vm.$watch('a', newValue => this.myMethod())。因为箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之类的错误。
（2）生命周期
beforeCreate/created  beforeMount/mounted  beforeUpdate/update  beforeDestroy/destroyed

三、模板语法
1.插值
（1）文本：{{}}
通过使用v-once指令，进行一次性插值，当数据改变时，插值处的内容不会更新。注意：影响到该节点其他数据绑定。
<span v-once>这个将不会改变: {{ msg }}</span>
（2）v-html
双大括号会将数据解释为普通文本，而非HTML代码。为了输出真正的HTML，需要使用v-html指令。v-html指令相当于绑定的元素.innerHtml = 相关的data属性数据。而{{}}则相当于当前属性.innerText。
站点上动态渲染的任意HTML可能会非常危险，因为它很容易导致XSS攻击。请只对可信内容使用HTML插值，绝不要对用户提供的内容使用插值。
（3）v-bind
作用在HTML特性上，HTML结构上的属性可以动态绑定vm.data中的属性。
（4）使用js表达式
{{ message.split('').reverse().join('') }}
这些表达式会在所属Vue实例的数据作用域下作为JavaScript被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。模板表达式都被放在沙盒中,只能访问全局变量的一个白名单，如Math和Date。你不应该在模板表达式中试图访问用户定义的全局变量。

<!-- 这是语句，不是表达式 -->
{{ var a = 1 }}

<!-- 流控制也不会生效，请使用三元表达式 {{ok ? message : ''}}-->
{{ if (ok) { return message } }}
2.指令
（1）方括号括起来的 JavaScript 表达式作为一个指令的参数。不能'foo' + bar来表示指令参数，可以用计算属性来替代这种表达式。需要避免使用大写字符来命名键名。
<a v-on:[eventName]="doSomething"> ... </a>
vm.data.eventName = 'href';
（2）修饰符
以 . 指名的后缀，用于指出一个指令应该以特殊的方式绑定。例如：
<form v-on:submit.prevent="onSubmit">...</form> 
.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()

四、计算属性和侦听器
1.计算属性
（1）模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。所以，对于任何复杂逻辑，你都应当使用计算属性。
（2）计算属性其值会根据相关数据的改变，而动态变化。
（3）计算属性的缓存 vs 方法
除了计算属性，还可以通过在表达式中调用方法来达到同样的效果。虽然，两种方式的结果完全相同，但过程却差异很大：
计算属性是基于它们的响应式依赖进行缓存的，只有在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要计算属性中涉及到的vm.data属性还没发生改变，其计算属性会立即返回之前的计算结果，而不必再执行函数。
我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性A，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于A。如果没有缓存，我们将不可避免的多次执行A的getter！如果你不希望有缓存，请用方法来替代。
（4）计算属性 vs 侦听属性
Vue 提供了一种更通用的方式来观察和响应Vue实例上的数据变动：侦听属性。当你有一些数据需要随着其它数据变动而变动时，你很容易滥用watch。然而，通常更好的做法是使用计算属性而不是命令式的watch回调。
watch: {
    firstName: function (val) {
      this.fullName = val + ' ' + this.lastName
    },
    lastName: function (val) {
      this.fullName = this.firstName + ' ' + val
    }
  }
上面代码是命令式且重复的。将它与计算属性的版本进行比较：
computed: {
    fullName: function () {
      return this.firstName + ' ' + this.lastName
    }
  }

（5）计算属性的setter
计算属性默认只有getter，不过在需要时你也可以提供一个setter：
computed: {
  fullName: {
    // getter
    get: function () {
      return this.firstName + ' ' + this.lastName
    },
    // setter 监听
    set: function (newValue) {
      var names = newValue.split(' ')
      this.firstName = names[0]
      this.lastName = names[names.length - 1]
    }
  }
}

（6）侦听器 watch
当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。
watch: {
    // 如果 `question` 发生改变，这个函数就会运行
    question: function (newQuestion, oldQuestion) {
      this.answer = 'Waiting for you to stop typing...'
      this.debouncedGetAnswer()
    }
}
计算属性无法做到的：允许执行异步操作，限制我们执行该操作的频率；在得到最终状态前，设置中间状态（改变其他data属性的值）。

五、Class 与 Style 绑定
（1）在将v-bind用于class和style时，表达式结果的类型可以是：字符串、对象、数组。
字符串：:class="{ active: isActive, 'text-danger': hasError }"
对象：:class="classObject" （也可以绑定计算属性）
classObject: {
    active: true,
    'text-danger': false
  }
数组：
1.:class="[activeClass, errorClass]"
data: {
  activeClass: 'active',
  errorClass: 'text-danger'
}
相当于：class="active text-danger"
2.:class="[isActive ? activeClass : '', errorClass]"
3.:class="[{ active: isActive }, errorClass]"
（2）在组件上的class
声明一个组件：
Vue.component('my-component', {
  template: '<p class="foo bar">Hi</p>'
})
然后在使用它的时候添加一些 class：
<my-component class="baz boo"></my-component>
HTML 将被渲染为:
<p class="foo bar baz boo">Hi</p>
对于带数据绑定 class 也同样适用：
<my-component v-bind:class="{ active: isActive }"></my-component>
当 isActive 为 truthy[1] 时，HTML 将被渲染成为：
<p class="foo bar active">Hi</p>
（2）绑定内联样式
1.对象
:style="{ color: activeColor, fontSize: fontSize + 'px' }"
data: {
  activeColor: 'red',
  fontSize: 30
}
:style="styleObject"
styleObject: {
    color: 'red',
    fontSize: '13px'
  }
2.数组：
:style="[baseStyles, overridingStyles]"

六、条件渲染
（1）如果想切换多个元素呢？此时可以把一个<template>元素当做不可见的包裹元素，并在上面使用 v-if。最终的渲染结果将不包含<template>元素。（例子中，div在结构中会渲染而template则不会）
（2）在v-if和v-else上，vue会尽可能得复用已有元素，这样<input>不会被替换掉，仅仅是替换了它的 placeholder。这样也不总是符合实际需求，所以Vue为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的key属性即可。（注意，<label> 元素仍然会被高效地复用，因为它们没有添加 key 属性。）
（3）v-show
另一个用于根据条件展示元素的选项是v-show指令。不同的是带有v-show的元素始终会被渲染并保留在DOM中。v-show 只是简单地切换元素的CSS属性 display。注意，v-show不支持<template>元素，也不支持v-else。
（4）v-if vs v-else
1.v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。
2.v-if也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。
3.相比之下，v-show就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于CSS进行切换。
4.一般来说，v-if有更高的切换开销，而v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用v-show较好；如果在运行时条件很少改变，则使用v-if较好。
（5）不推荐同时使用v-if和v-for
当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。

七、列表渲染
（1）v-for
1.<div v-for="item in items"></div>
2.<div v-for="item of items"></div>  (可以用of替代in作为分隔符)
（2）v-for遍历一个对象
第一个参数是键值，第二个参数是键名，第三个索引
（3）key
为了重用或重新排序现有元素。
当Vue正在更新使用v-for渲染的元素列表时，它默认使用“就地更新”的策略。如果数据项的顺序被改变，Vue将不会移动DOM元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。这个默认的模式是高效的，但是只适用于不依赖子组件状态或临时DOM状态 (例如：表单输入值) 的列表渲染输出。
为了给Vue一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性：
（4）vue封装的方法 ？
Vue将被侦听的数组的变异方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：
push()
pop()
shift()
unshift()
splice()
sort()
reverse()
相比之下，也有非变异方法，例如filter()、concat()和slice()。它们不会改变原始数组，而总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组。
例如： this.itemsMethod = this.itemsMethod.join('..');
当然： this.itemsMethod.join('..');是无效的。
concat：连接多个数组，返回新的数组
join：将数组中所有元素以参数作为分隔符放入一个字符
slice：slice(start,end)，返回选定元素
map,filter,forEach,some,every等不改变原数组
（5）强制更新
由于 JavaScript 的限制，Vue 不能检测以下数组的变动：
1.当你利用索引直接设置一个数组项时，例如：vm.items[indexOfItem] = newValue
2.当你修改数组的长度时，例如：vm.items.length = newLength
通过：
Vue.set(vm.items, indexOfItem, newValue) 全局 或 vm.$set(vm.items, indexOfItem, newValue)
来在响应式系统内触发状态更新。
3.为已有对象赋值多个新属性，比如使用Object.assign()或 _.extend()。在这种情况下，你应该用两个对象的属性创建一个新的对象。所以，如果你想添加新的响应式属性，不要像这样：
var vm = new Vue({
  data: {
    userProfile: {
      name: 'Anika'
    }
  }
})
Object.assign(vm.userProfile, {
  age: 27,
  favoriteColor: 'Vue Green'
})
你应该这样做：
vm.userProfile = Object.assign({}, vm.userProfile, {
  age: 27,
  favoriteColor: 'Vue Green'
})
Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。第一个参数为目标对象，其余参数为源对象。
(6)显示过滤/排序后的结果
1.计算属性
<li v-for="n in evenNumbers">{{ n }}</li>
data: {
  numbers: [ 1, 2, 3, 4, 5 ]
},
computed: {
  evenNumbers: function () {
    return this.numbers.filter(function (number) {
      return number % 2 === 0
    })
  }
}
2.方法
<li v-for="n in even(numbers)">{{ n }}</li>
data: {
  numbers: [ 1, 2, 3, 4, 5 ]
},
methods: {
  even: function (numbers) {
    return numbers.filter(function (number) {
      return number % 2 === 0
    })
  }
}
（7）v-for 也可以接受整数。v-for="n in 10"
（8）在 <template> 上使用 v-for
跟v-if一样，渲染的时候只渲染template内容，不会渲染其标签。
（9）is="todo-item" 属性与<todo-item>效果相同。但是可以避开一些潜在的浏览器解析错误。但是可以避开一些潜在的浏览器解析错误。

八、事件处理
（1）event  ？
1.如果方法中没有传递，即 v-on:click="greet"，则在方法中可以直接使用event.target.tagName
2.如果再方法中传递了，即 v-on:click="warn('Form cannot be submitted yet.', $event)"，则在方法中一定要设置参数接收 warn: function (message, event)
（2）事件修饰符
1. .stop
<!-- 阻止单击事件继续传播 -->
<a v-on:click.stop="doThis"></a>
2. .prevent
<!-- 提交事件不再重载页面 -->
<form v-on:submit.prevent="onSubmit"></form>
3. .capture
<!-- 添加事件监听器时使用事件捕获模式 -->
<!-- 即元素自身触发的事件先在此处理，然后才交由内部元素进行处理 -->
<div v-on:click.capture="doThis">...</div>
4. .self
<!-- 只当在 event.target 是当前元素自身时触发处理函数 -->
<!-- 即事件不是从内部元素触发的 -->
<div v-on:click.self="doThat">...</div>
5. .once
<!-- 点击事件将只会触发一次 -->
<a v-on:click.once="doThis"></a>
6. .passive
<!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 -->
<!-- 而不会等待 `onScroll` 完成  -->
<!-- 这其中包含 `event.preventDefault()` 的情况 -->
<div v-on:scroll.passive="onScroll">...</div>
这个 .passive修饰符尤其能够提升移动端的性能。不要把 .passive和 .prevent一起使用，因为 .prevent将会被忽略，同时浏览器可能会向你展示一个警告。请记住，.passive会告诉浏览器你不想阻止事件的默认行为。
(3) 按键修饰符
<input v-on:keyup.enter="submit">
.enter
.tab
.delete (捕获“删除”和“退格”键)
.esc
.space
.up
.down
.left
.right
（4）使用 v-on 有几个好处：
1. 扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。
2. 因为你无须在JavaScript里手动绑定事件，你的ViewModel代码可以是非常纯粹的逻辑，和DOM完全解耦，更易于测试。
3. 当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何清理它们

九、表单输入绑定







跨组件数据流、自定义事件通信以及构建工具集成